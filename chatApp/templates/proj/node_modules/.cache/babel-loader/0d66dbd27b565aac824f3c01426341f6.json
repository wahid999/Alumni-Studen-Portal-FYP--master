{"ast":null,"code":"class WebSocketService {\n  static getInstance() {\n    if (!WebSocketService.instance) {\n      WebSocketService.instance = new WebSocketService();\n    }\n\n    return WebSocketService.instance;\n  }\n\n  constructor() {\n    this.callbacks = {};\n    this.socketRef = null;\n  }\n\n  connect(chatUrl) {\n    const path = `ws://127.0.0.1:8000/ws/chat/${chatUrl}/`;\n    this.socketRef = new WebSocket(path);\n\n    this.socketRef.onopen = () => {\n      console.log(\"WebSocket open\");\n    };\n\n    this.socketRef.onmessage = e => {\n      this.socketNewMessage(e.data);\n    };\n\n    this.socketRef.onerror = e => {\n      console.log(e.message);\n    };\n\n    this.socketRef.onclose = () => {\n      console.log(\"WebSocket closed let's reopen\");\n      this.connect();\n    };\n  }\n\n  disconnect() {\n    this.socketRef.close();\n  }\n\n  socketNewMessage(data) {\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command;\n\n    if (Object.keys(this.callbacks).length === 0) {\n      return;\n    }\n\n    if (command === \"messages\") {\n      this.callbacks[command](parsedData.messages);\n    }\n\n    if (command === \"new_message\") {\n      this.callbacks[command](parsedData.message);\n    }\n  }\n\n  fetchMessages(username, chatId) {\n    this.sendMessage({\n      command: \"fetch_messages\",\n      username: username,\n      chatId: chatId\n    });\n  }\n\n  newChatMessage(message) {\n    this.sendMessage({\n      command: \"new_message\",\n      from: message.from,\n      message: message.content,\n      chatId: message.chatId\n    });\n  }\n\n  addCallbacks(messagesCallback, newMessageCallback) {\n    this.callbacks[\"messages\"] = messagesCallback;\n    this.callbacks[\"new_message\"] = newMessageCallback;\n  }\n\n  sendMessage(data) {\n    try {\n      this.socketRef.send(JSON.stringify({ ...data\n      }));\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  state() {\n    return this.socketRef.readyState;\n  }\n\n}\n\nWebSocketService.instance = null;\nconst WebSocketInstance = WebSocketService.getInstance();\nexport default WebSocketInstance;","map":{"version":3,"sources":["E:/Programming/React/For Merging Chat-App/proj/src/websocket.js"],"names":["WebSocketService","getInstance","instance","constructor","callbacks","socketRef","connect","chatUrl","path","WebSocket","onopen","console","log","onmessage","e","socketNewMessage","data","onerror","message","onclose","disconnect","close","parsedData","JSON","parse","command","Object","keys","length","messages","fetchMessages","username","chatId","sendMessage","newChatMessage","from","content","addCallbacks","messagesCallback","newMessageCallback","send","stringify","err","state","readyState","WebSocketInstance"],"mappings":"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","sourcesContent":["class WebSocketService {\r\n  static instance = null;\r\n  callbacks = {};\r\n\r\n  static getInstance() {\r\n    if (!WebSocketService.instance) {\r\n      WebSocketService.instance = new WebSocketService();\r\n    }\r\n    return WebSocketService.instance;\r\n  }\r\n\r\n  constructor() {\r\n    this.socketRef = null;\r\n  }\r\n\r\n  connect(chatUrl) {\r\n    const path = `ws://127.0.0.1:8000/ws/chat/${chatUrl}/`;\r\n    this.socketRef = new WebSocket(path);\r\n    this.socketRef.onopen = () => {\r\n      console.log(\"WebSocket open\");\r\n    };\r\n    this.socketRef.onmessage = e => {\r\n      this.socketNewMessage(e.data);\r\n    };\r\n    this.socketRef.onerror = e => {\r\n      console.log(e.message);\r\n    };\r\n    this.socketRef.onclose = () => {\r\n      console.log(\"WebSocket closed let's reopen\");\r\n      this.connect();\r\n    };\r\n  }\r\n\r\n  disconnect() {\r\n    this.socketRef.close();\r\n  }\r\n\r\n  socketNewMessage(data) {\r\n    const parsedData = JSON.parse(data);\r\n    const command = parsedData.command;\r\n    if (Object.keys(this.callbacks).length === 0) {\r\n      return;\r\n    }\r\n    if (command === \"messages\") {\r\n      this.callbacks[command](parsedData.messages);\r\n    }\r\n    if (command === \"new_message\") {\r\n      this.callbacks[command](parsedData.message);\r\n    }\r\n  }\r\n\r\n  fetchMessages(username, chatId) {\r\n    this.sendMessage({\r\n      command: \"fetch_messages\",\r\n      username: username,\r\n      chatId: chatId\r\n    });\r\n  }\r\n\r\n  newChatMessage(message) {\r\n    this.sendMessage({\r\n      command: \"new_message\",\r\n      from: message.from,\r\n      message: message.content,\r\n      chatId: message.chatId\r\n    });\r\n  }\r\n\r\n  addCallbacks(messagesCallback, newMessageCallback) {\r\n    this.callbacks[\"messages\"] = messagesCallback;\r\n    this.callbacks[\"new_message\"] = newMessageCallback;\r\n  }\r\n\r\n  sendMessage(data) {\r\n    try {\r\n      this.socketRef.send(JSON.stringify({ ...data }));\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  }\r\n\r\n  state() {\r\n    return this.socketRef.readyState;\r\n  }\r\n}\r\n\r\nconst WebSocketInstance = WebSocketService.getInstance();\r\n\r\nexport default WebSocketInstance;\r\n"]},"metadata":{},"sourceType":"module"}