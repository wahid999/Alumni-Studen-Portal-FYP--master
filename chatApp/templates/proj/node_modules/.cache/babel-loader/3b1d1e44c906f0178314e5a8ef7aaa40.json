{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programming\\\\React\\\\For Merging Chat-App\\\\proj\\\\src\\\\containers\\\\Form.js\";\nimport React from \"react\";\nimport { Form, Button, Select } from \"antd\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport * as navActions from \"../store/actions/nav\";\nimport * as messageActions from \"../store/actions/message\";\nconst FormItem = Form.Item;\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass HorizontalAddChatForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      usernames: [],\n      error: null\n    };\n\n    this.handleChange = value => {\n      this.setState({\n        usernames: value\n      });\n    };\n\n    this.handleSubmit = e => {\n      const {\n        usernames\n      } = this.state;\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          const combined = [...usernames, this.props.username];\n          console.log(combined);\n          axios.defaults.headers = {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Token ${this.props.token}`\n          };\n          axios.post(\"http://127.0.0.1:8000/chat/create/\", {\n            messages: [],\n            participants: combined\n          }).then(res => {\n            this.props.history.push(`/${res.data.memebers_name}`);\n            this.props.closeAddChatPopup();\n            this.props.getUserChats(this.props.username, this.props.token);\n          }).catch(err => {\n            console.error(err);\n            this.setState({\n              error: 'err'\n            });\n          });\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.form.validateFields();\n  }\n\n  render() {\n    const {\n      getFieldDecorator,\n      getFieldsError,\n      getFieldError,\n      isFieldTouched\n    } = this.props.form;\n    const userNameError = isFieldTouched(\"userName\") && getFieldError(\"userName\");\n    return /*#__PURE__*/React.createElement(Form, {\n      layout: \"inline\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, this.state.error ? `${this.state.error}` : null, /*#__PURE__*/React.createElement(FormItem, {\n      validateStatus: userNameError ? \"error\" : \"\",\n      help: userNameError || \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, getFieldDecorator(\"userName\", {\n      rules: [{\n        required: true,\n        message: \"Please input the username of the person you want to chat with\"\n      }]\n    })( /*#__PURE__*/React.createElement(Select, {\n      mode: \"tags\",\n      style: {\n        width: \"100%\"\n      },\n      placeholder: \"Tags Mode\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, []))), /*#__PURE__*/React.createElement(FormItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      disabled: hasErrors(getFieldsError()),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, \"Start a chat\")));\n  }\n\n}\n\nconst AddChatForm = Form.create()(HorizontalAddChatForm);\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    username: state.auth.username\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closeAddChatPopup: () => dispatch(navActions.closeAddChatPopup()),\n    getUserChats: (username, token) => dispatch(messageActions.getUserChats(username, token))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddChatForm));","map":{"version":3,"sources":["E:/Programming/React/For Merging Chat-App/proj/src/containers/Form.js"],"names":["React","Form","Button","Select","axios","connect","withRouter","navActions","messageActions","FormItem","Item","hasErrors","fieldsError","Object","keys","some","field","HorizontalAddChatForm","Component","state","usernames","error","handleChange","value","setState","handleSubmit","e","preventDefault","props","form","validateFields","err","values","combined","username","console","log","defaults","headers","Authorization","token","post","messages","participants","then","res","history","push","data","memebers_name","closeAddChatPopup","getUserChats","catch","componentDidMount","render","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","userNameError","rules","required","message","width","AddChatForm","create","mapStateToProps","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Form, Button, Select } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport * as navActions from \"../store/actions/nav\";\r\nimport * as messageActions from \"../store/actions/message\";\r\n\r\nconst FormItem = Form.Item;\r\n\r\nfunction hasErrors(fieldsError) {\r\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n\r\nclass HorizontalAddChatForm extends React.Component {\r\n  state = {\r\n    usernames: [],\r\n    error: null\r\n  };\r\n\r\n  handleChange = value => {\r\n    this.setState({\r\n      usernames: value\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.form.validateFields();\r\n  }\r\n\r\n  handleSubmit = e => {\r\n\r\n    const { usernames } = this.state;\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        const combined = [...usernames, this.props.username];\r\n        console.log(combined);\r\n        axios.defaults.headers = {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Token ${this.props.token}`\r\n        };\r\n        axios\r\n          .post(\"http://127.0.0.1:8000/chat/create/\", {\r\n            messages: [],\r\n            participants: combined\r\n          })\r\n\r\n          \r\n          .then(res => {\r\n            this.props.history.push(`/${res.data.memebers_name}`);\r\n            this.props.closeAddChatPopup();\r\n            this.props.getUserChats(this.props.username, this.props.token);\r\n          })\r\n          .catch(err => {\r\n            console.error(err);\r\n            this.setState({\r\n              error: 'err'\r\n            });\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      getFieldDecorator,\r\n      getFieldsError,\r\n      getFieldError,\r\n      isFieldTouched\r\n    } = this.props.form;\r\n\r\n    const userNameError =\r\n      isFieldTouched(\"userName\") && getFieldError(\"userName\");\r\n    return (\r\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n        {this.state.error ? `${this.state.error}` : null}\r\n        <FormItem\r\n          validateStatus={userNameError ? \"error\" : \"\"}\r\n          help={userNameError || \"\"}\r\n        >\r\n          {getFieldDecorator(\"userName\", {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message:\r\n                  \"Please input the username of the person you want to chat with\"\r\n              }\r\n            ]\r\n          })(\r\n            <Select\r\n              mode=\"tags\"\r\n              style={{ width: \"100%\" }}\r\n              placeholder=\"Tags Mode\"\r\n              onChange={this.handleChange}\r\n            >\r\n              {[]}\r\n            </Select>\r\n          )}\r\n        </FormItem>\r\n        <FormItem>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            disabled={hasErrors(getFieldsError())}\r\n          >\r\n            Start a chat\r\n          </Button>\r\n        </FormItem>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst AddChatForm = Form.create()(HorizontalAddChatForm);\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    token: state.auth.token,\r\n    username: state.auth.username\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    closeAddChatPopup: () => dispatch(navActions.closeAddChatPopup()),\r\n    getUserChats: (username, token) =>\r\n      dispatch(messageActions.getUserChats(username, token))\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(AddChatForm)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}