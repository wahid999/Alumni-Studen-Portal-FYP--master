{"ast":null,"code":"// class WebSocketService {\n//   static instance = null;\n//   callbacks = {};\n//   static getInstance() {\n//     if (!WebSocketService.instance) {\n//       WebSocketService.instance = new WebSocketService();\n//     }\n//     return WebSocketService.instance;\n//   }\n//   constructor() {\n//     this.socketRef = null;\n//   }\n//   connect(chatUrl) {\n//     const path = `ws://127.0.0.1:8000/ws/chat/${chatUrl}/`;\n//     this.socketRef = new WebSocket(path);\n//     this.socketRef.onopen = () => {\n//       console.log(\"WebSocket open\");\n//     };\n//     this.socketRef.onmessage = e => {\n//       this.socketNewMessage(e.data);\n//     };\n//     this.socketRef.onerror = e => {\n//       console.log(e.message);\n//     };\n//     this.socketRef.onclose = () => {\n//       console.log(\"WebSocket closed let's reopen\");\n//       this.connect();\n//     };\n//   }\n//   disconnect() {\n//     this.socketRef.close();\n//   }\n//   socketNewMessage(data) {\n//     const parsedData = JSON.parse(data);\n//     const command = parsedData.command;\n//     if (Object.keys(this.callbacks).length === 0) {\n//       return;\n//     }\n//     if (command === \"messages\") {\n//       this.callbacks[command](parsedData.messages);\n//     }\n//     if (command === \"new_message\") {\n//       this.callbacks[command](parsedData.message);\n//     }\n//   }\n//   fetchMessages(username, chatId) {\n//     this.sendMessage({\n//       command: \"fetch_messages\",\n//       username: username,\n//       chatId: chatId\n//     });\n//   }\n//   newChatMessage(message) {\n//     this.sendMessage({\n//       command: \"new_message\",\n//       from: message.from,\n//       message: message.content,\n//       chatId: message.chatId\n//     });\n//   }\n//   addCallbacks(messagesCallback, newMessageCallback) {\n//     this.callbacks[\"messages\"] = messagesCallback;\n//     this.callbacks[\"new_message\"] = newMessageCallback;\n//   }\n//   sendMessage(data) {\n//     try {\n//       this.socketRef.send(JSON.stringify({ ...data }));\n//     } catch (err) {\n//       console.log(err.message);\n//     }\n//   }\n//   state() {\n//     return this.socketRef.readyState;\n//   }\n// }\n// const WebSocketInstance = WebSocketService.getInstance();\n// export default WebSocketInstance;","map":{"version":3,"sources":["E:/Programming/React/For Merging Chat-App/proj/src/websocket.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["// class WebSocketService {\r\n//   static instance = null;\r\n//   callbacks = {};\r\n\r\n//   static getInstance() {\r\n//     if (!WebSocketService.instance) {\r\n//       WebSocketService.instance = new WebSocketService();\r\n//     }\r\n//     return WebSocketService.instance;\r\n//   }\r\n\r\n//   constructor() {\r\n//     this.socketRef = null;\r\n//   }\r\n\r\n//   connect(chatUrl) {\r\n//     const path = `ws://127.0.0.1:8000/ws/chat/${chatUrl}/`;\r\n//     this.socketRef = new WebSocket(path);\r\n//     this.socketRef.onopen = () => {\r\n//       console.log(\"WebSocket open\");\r\n//     };\r\n//     this.socketRef.onmessage = e => {\r\n//       this.socketNewMessage(e.data);\r\n//     };\r\n//     this.socketRef.onerror = e => {\r\n//       console.log(e.message);\r\n//     };\r\n//     this.socketRef.onclose = () => {\r\n//       console.log(\"WebSocket closed let's reopen\");\r\n//       this.connect();\r\n//     };\r\n//   }\r\n\r\n//   disconnect() {\r\n//     this.socketRef.close();\r\n//   }\r\n\r\n//   socketNewMessage(data) {\r\n//     const parsedData = JSON.parse(data);\r\n//     const command = parsedData.command;\r\n//     if (Object.keys(this.callbacks).length === 0) {\r\n//       return;\r\n//     }\r\n//     if (command === \"messages\") {\r\n//       this.callbacks[command](parsedData.messages);\r\n//     }\r\n//     if (command === \"new_message\") {\r\n//       this.callbacks[command](parsedData.message);\r\n//     }\r\n//   }\r\n\r\n//   fetchMessages(username, chatId) {\r\n//     this.sendMessage({\r\n//       command: \"fetch_messages\",\r\n//       username: username,\r\n//       chatId: chatId\r\n//     });\r\n//   }\r\n\r\n//   newChatMessage(message) {\r\n//     this.sendMessage({\r\n//       command: \"new_message\",\r\n//       from: message.from,\r\n//       message: message.content,\r\n//       chatId: message.chatId\r\n//     });\r\n//   }\r\n\r\n//   addCallbacks(messagesCallback, newMessageCallback) {\r\n//     this.callbacks[\"messages\"] = messagesCallback;\r\n//     this.callbacks[\"new_message\"] = newMessageCallback;\r\n//   }\r\n\r\n//   sendMessage(data) {\r\n//     try {\r\n//       this.socketRef.send(JSON.stringify({ ...data }));\r\n//     } catch (err) {\r\n//       console.log(err.message);\r\n//     }\r\n//   }\r\n\r\n//   state() {\r\n//     return this.socketRef.readyState;\r\n//   }\r\n// }\r\n\r\n// const WebSocketInstance = WebSocketService.getInstance();\r\n\r\n// export default WebSocketInstance;\r\n"]},"metadata":{},"sourceType":"module"}